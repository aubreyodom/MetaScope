% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/filter_host.R
\name{filter_host_bowtie}
\alias{filter_host_bowtie}
\title{Align reads against one or more filter libraries and subsequently
remove mapped reads}
\usage{
filter_host_bowtie(
  reads,
  unfiltered_bam,
  lib_dir,
  libs,
  output = paste(tools::file_path_sans_ext(unfiltered_bam), "filtered", "bam", sep =
    "."),
  bowtie2_options = NULL,
  threads = 8,
  overwrite = FALSE
)
}
\arguments{
\item{reads}{The reads used to create the unfiltered .bam file}

\item{unfiltered_bam}{The name of a merged, sorted .bam file that has previously
been aligned to a reference library. Likely, the output from running an
instance of \code{align_target_bowtie()}.}

\item{lib_dir}{Path to the directory that contains the filter Bowtie2 index
files.}

\item{libs}{The basename of the filter libraries 
(without .bt2 or .bt2l extension)}

\item{output}{The desired name of the output .bam file. Default is
the basename of \code{unfiltered_bam} + \code{.filtered.bam}.}

\item{bowtie2_options}{Optional: Additional parameters that can be passed to
the align_target_bowtie() function. To see all the available parameters
use Rbowtie2::bowtie2_usage(). Default parameters are the parameters are the 
default parameters that PathoScope 2.0 uses. NOTE: Users should pass all their
parameters as one string and if optional parameters are given then the user 
is responsible for entering all the parameters to be used by Bowtie2. NOTE:
The only parameters that should NOT be specified here is the threads.}

\item{threads}{The amount of threads available for the function.
Default is 8 threads.}

\item{overwrite}{Whether existing files should be overwritten. 
Default is FALSE.}
}
\value{
The name of a filtered, sorted .bam file written to the user's
current working directory.
}
\description{
After a sample is aligned to a target library with \code{align_target_bowtie()},
we may use \code{filter_host_bowtie()} to remove unwelcome host contamination using
filter reference libraries. This function takes as input both the reads and the
name of the .bam file produced via \code{align_target_bowtie()}, and produces a
sorted .bam file with any reads that match the filter libraries removed.
This resulting .bam file may be used downstream for further analysis.
}
\examples{
# Code not run
\donttest{
# Create a temporary directory to store the filter fasta file
ref_temp <- tempfile()
dir.create(ref_temp)

# Create a temporary directory to store the filter index files
lib_temp <- tempfile()
dir.create(lib_temp)

# Create a temporary directory to store the filtered alignment bam file
align_temp <- tempfile()
dir.create(align_temp)

# Download all the RefSeq reference archaea genomes to current directory
download_refseq("archaea", representative = TRUE, compress = TRUE)

# Move downloaded fasta file from current directory to temporary ref directory
file.rename(from = file.path(".", "Archaea.fasta.gz"),
to = file.path(ref_temp, "Archaea.fasta.gz"))

# Create bowtie archaea index files in temporary index directory
mk_bowtie_index(ref_dir = ref_temp, lib_dir = lib_temp, lib_name = "archaea",
overwrite=FALSE)

# Get path to example reads
readPath <- system.file("extdata", "SRR606366.fastq", package = "MetaScope")

# Get path to corresponding unfiltered bacteria aligned bam file
bamPath <- system.file("extdata", "bacteria_example.bam", package = "MetaScope")

# Specify where the archaea filtered bam file should be written
outputPath <- file.path(align_temp, "bacteria_example.filtered.bam")

# Filter the bam file of reads that match to an archaeal genome
filter_host_bowtie(reads = readPath, unfiltered_bam = bamPath, 
lib_dir = lib_temp, libs = "archaea", output = outputPath)

} 

}
